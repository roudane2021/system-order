{{- if .Values.infraInventory }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.infraInventory.name }}-deployment
  labels:
    app: {{ .Values.infraInventory.name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.infraInventory.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.infraInventory.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.infraInventory.name }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Values.infraInventory.name }}
          image: "{{ .Values.infraInventory.image.repository }}:{{ .Values.infraInventory.image.tag }}"
          imagePullPolicy: {{ .Values.infraInventory.image.pullPolicy }}
          ports:
            - name: http # Even if not primary, actuator might use it
              containerPort: {{ .Values.infraInventory.service.port }} # Or a specific actuator port if different
              protocol: TCP
          # Liveness and Readiness Probes (example using actuator/health)
          # Ensure your application exposes these endpoints if you enable them.
          # livenessProbe:
          #   httpGet:
          #     path: /actuator/health/liveness
          #     port: http
          #   initialDelaySeconds: 60
          #   periodSeconds: 15
          # readinessProbe:
          #   httpGet:
          #     path: /actuator/health/readiness
          #     port: http
          #   initialDelaySeconds: 30
          #   periodSeconds: 10
          resources:
            requests:
              cpu: {{ .Values.infraInventory.resources.requests.cpu }}
              memory: {{ .Values.infraInventory.resources.requests.memory }}
            limits:
              cpu: {{ .Values.infraInventory.resources.limits.cpu }}
              memory: {{ .Values.infraInventory.resources.limits.memory }}
          envFrom:
          {{- with .Values.infraInventory.envFrom }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          # Example of directly setting env vars from ConfigMap
          # env:
          #   - name: SPRING_CONFIG_ADDITIONAL_LOCATION
          #     value: "file:/config/application-k8s.properties"
          #   - name: SPRING_PROFILES_ACTIVE # Can also be set here
          #     valueFrom:
          #       configMapKeyRef:
          #         name: {{ .Values.infraInventory.name }}-config
          #         key: SPRING_PROFILES_ACTIVE
          # Volume mounts if config files are large or numerous
          # volumeMounts:
          #   - name: config-volume
          #     mountPath: /config
      # volumes:
      #   - name: config-volume
      #     configMap:
      #       name: {{ .Values.infraInventory.name }}-config
---
{{- end }}
